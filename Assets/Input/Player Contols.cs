//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Input/Player Contols.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerContols : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerContols()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Contols"",
    ""maps"": [
        {
            ""name"": ""Player Controls A"",
            ""id"": ""cd5ed86b-243f-43b5-88e7-a0d2ab07fc63"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""afd37814-4069-429a-b6c8-afed78b83e59"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""667bba5b-35dc-4ceb-b99e-3c390ef2752e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""19c74244-f54e-4dce-b454-58da36e3b497"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold,Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""9ac59354-a8c4-4e90-b074-c45f433d5924"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Super"",
                    ""type"": ""Button"",
                    ""id"": ""1b4597de-160a-4ea0-adf3-ddfe01755486"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""2386121b-7d30-4540-9c4c-1a3516ab1e37"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""675b3d56-9f8a-49f5-8aa4-2f747b859fb0"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a5814cb-224d-4d1d-a500-4e78a65da0dd"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f145623e-4368-413b-8da4-2a79abf7b637"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ff83ec5-d72f-484a-a5bf-c3715f9a5fbf"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1a139ca-7ce2-4eba-af2c-4e599151bf3d"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Super"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f5cf186-ea0b-4cbf-bab7-318ea45fddb4"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu Controls (Gamepad)"",
            ""id"": ""18389432-e66d-4561-ace7-9cc9ef833c3b"",
            ""actions"": [
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""706785f1-7e81-441d-8607-ce274c939985"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""cc506239-dbc2-4710-9146-0ee603340efd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""07ea39db-52b0-4056-8479-7d75af95dd82"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""eb54b6e7-948b-4c38-a281-9450974daf57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e5ea139c-b8ba-4342-a6ec-0e12b947b9d1"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfb1f5c4-d7b5-4fe1-8ada-70a7753b8079"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""134498dd-ae8a-4d2b-b9e3-d87c941d7876"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc7c85b6-2919-4bc8-ae81-d7cfa29dc410"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""779eaef4-4148-465a-b716-8376cb27e0a2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu Controls (Keyboard)"",
            ""id"": ""db4b8c67-8cd0-4a1e-9a53-fc3195b7c324"",
            ""actions"": [
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""21e59408-ba04-4537-b44f-cb798f723b54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""86b876f4-2d69-49a8-96f7-2b0600da4698"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""8c4cf9a9-8339-452f-911d-3f4d9359a2a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""ed411d0d-ad22-4b92-a97a-3421dbc434a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d0fd2246-36db-4223-aa69-61aae2aba107"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bbed462d-46d1-4d05-b190-5996ccdd7a85"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""ff87631c-9983-4b18-84ae-504765881ed2"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""568a9b0b-4628-445d-935f-38d094cd92dd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ffac5368-6a14-48ed-9666-78d896c8002b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d5b6e574-1516-4343-b0fa-d57a643a997a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8a567563-de55-45e7-94ce-d3052309fedc"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b941ea05-5a13-4b4f-9e06-8727eb1a39c5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8970115d-5d89-46ec-ad81-ca496dce7da8"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0bc028aa-4bb6-40c5-8e9d-6a1a11a5ecae"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ca8f815b-26b5-45f5-83f6-a69907bb3792"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""78e2912a-7969-4280-9f08-cbdb5f5d71bf"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8813448-9e94-4504-a2f3-239049849015"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""daaa72ff-2f22-4903-ba40-58879d544d14"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63807352-fcd8-4fb6-b9cd-ffb5ebf4ac7f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Keyboard"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""005428a5-c02c-4bee-b559-5c2d99cd746a"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acbad608-cd7c-4b74-90b8-2b926ef26089"",
                    ""path"": ""<Touchscreen>/touch*/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8f6ce33-d0a7-422c-8a72-dc15a634b2bc"",
                    ""path"": ""<XRController>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // Player Controls A
        m_PlayerControlsA = asset.FindActionMap("Player Controls A", throwIfNotFound: true);
        m_PlayerControlsA_Movement = m_PlayerControlsA.FindAction("Movement", throwIfNotFound: true);
        m_PlayerControlsA_Grab = m_PlayerControlsA.FindAction("Grab", throwIfNotFound: true);
        m_PlayerControlsA_Throw = m_PlayerControlsA.FindAction("Throw", throwIfNotFound: true);
        m_PlayerControlsA_Dodge = m_PlayerControlsA.FindAction("Dodge", throwIfNotFound: true);
        m_PlayerControlsA_Super = m_PlayerControlsA.FindAction("Super", throwIfNotFound: true);
        m_PlayerControlsA_Pause = m_PlayerControlsA.FindAction("Pause", throwIfNotFound: true);
        // Menu Controls (Gamepad)
        m_MenuControlsGamepad = asset.FindActionMap("Menu Controls (Gamepad)", throwIfNotFound: true);
        m_MenuControlsGamepad_Start = m_MenuControlsGamepad.FindAction("Start", throwIfNotFound: true);
        m_MenuControlsGamepad_Movement = m_MenuControlsGamepad.FindAction("Movement", throwIfNotFound: true);
        m_MenuControlsGamepad_Select = m_MenuControlsGamepad.FindAction("Select", throwIfNotFound: true);
        m_MenuControlsGamepad_Cancel = m_MenuControlsGamepad.FindAction("Cancel", throwIfNotFound: true);
        // Menu Controls (Keyboard)
        m_MenuControlsKeyboard = asset.FindActionMap("Menu Controls (Keyboard)", throwIfNotFound: true);
        m_MenuControlsKeyboard_Start = m_MenuControlsKeyboard.FindAction("Start", throwIfNotFound: true);
        m_MenuControlsKeyboard_Movement = m_MenuControlsKeyboard.FindAction("Movement", throwIfNotFound: true);
        m_MenuControlsKeyboard_Select = m_MenuControlsKeyboard.FindAction("Select", throwIfNotFound: true);
        m_MenuControlsKeyboard_Cancel = m_MenuControlsKeyboard.FindAction("Cancel", throwIfNotFound: true);
        m_MenuControlsKeyboard_Point = m_MenuControlsKeyboard.FindAction("Point", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Controls A
    private readonly InputActionMap m_PlayerControlsA;
    private IPlayerControlsAActions m_PlayerControlsAActionsCallbackInterface;
    private readonly InputAction m_PlayerControlsA_Movement;
    private readonly InputAction m_PlayerControlsA_Grab;
    private readonly InputAction m_PlayerControlsA_Throw;
    private readonly InputAction m_PlayerControlsA_Dodge;
    private readonly InputAction m_PlayerControlsA_Super;
    private readonly InputAction m_PlayerControlsA_Pause;
    public struct PlayerControlsAActions
    {
        private @PlayerContols m_Wrapper;
        public PlayerControlsAActions(@PlayerContols wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerControlsA_Movement;
        public InputAction @Grab => m_Wrapper.m_PlayerControlsA_Grab;
        public InputAction @Throw => m_Wrapper.m_PlayerControlsA_Throw;
        public InputAction @Dodge => m_Wrapper.m_PlayerControlsA_Dodge;
        public InputAction @Super => m_Wrapper.m_PlayerControlsA_Super;
        public InputAction @Pause => m_Wrapper.m_PlayerControlsA_Pause;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControlsA; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsAActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlsAActions instance)
        {
            if (m_Wrapper.m_PlayerControlsAActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnMovement;
                @Grab.started -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnGrab;
                @Grab.performed -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnGrab;
                @Grab.canceled -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnGrab;
                @Throw.started -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnThrow;
                @Throw.performed -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnThrow;
                @Throw.canceled -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnThrow;
                @Dodge.started -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnDodge;
                @Dodge.performed -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnDodge;
                @Dodge.canceled -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnDodge;
                @Super.started -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnSuper;
                @Super.performed -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnSuper;
                @Super.canceled -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnSuper;
                @Pause.started -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PlayerControlsAActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_PlayerControlsAActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Grab.started += instance.OnGrab;
                @Grab.performed += instance.OnGrab;
                @Grab.canceled += instance.OnGrab;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
                @Dodge.started += instance.OnDodge;
                @Dodge.performed += instance.OnDodge;
                @Dodge.canceled += instance.OnDodge;
                @Super.started += instance.OnSuper;
                @Super.performed += instance.OnSuper;
                @Super.canceled += instance.OnSuper;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public PlayerControlsAActions @PlayerControlsA => new PlayerControlsAActions(this);

    // Menu Controls (Gamepad)
    private readonly InputActionMap m_MenuControlsGamepad;
    private IMenuControlsGamepadActions m_MenuControlsGamepadActionsCallbackInterface;
    private readonly InputAction m_MenuControlsGamepad_Start;
    private readonly InputAction m_MenuControlsGamepad_Movement;
    private readonly InputAction m_MenuControlsGamepad_Select;
    private readonly InputAction m_MenuControlsGamepad_Cancel;
    public struct MenuControlsGamepadActions
    {
        private @PlayerContols m_Wrapper;
        public MenuControlsGamepadActions(@PlayerContols wrapper) { m_Wrapper = wrapper; }
        public InputAction @Start => m_Wrapper.m_MenuControlsGamepad_Start;
        public InputAction @Movement => m_Wrapper.m_MenuControlsGamepad_Movement;
        public InputAction @Select => m_Wrapper.m_MenuControlsGamepad_Select;
        public InputAction @Cancel => m_Wrapper.m_MenuControlsGamepad_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_MenuControlsGamepad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuControlsGamepadActions set) { return set.Get(); }
        public void SetCallbacks(IMenuControlsGamepadActions instance)
        {
            if (m_Wrapper.m_MenuControlsGamepadActionsCallbackInterface != null)
            {
                @Start.started -= m_Wrapper.m_MenuControlsGamepadActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_MenuControlsGamepadActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_MenuControlsGamepadActionsCallbackInterface.OnStart;
                @Movement.started -= m_Wrapper.m_MenuControlsGamepadActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MenuControlsGamepadActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MenuControlsGamepadActionsCallbackInterface.OnMovement;
                @Select.started -= m_Wrapper.m_MenuControlsGamepadActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_MenuControlsGamepadActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_MenuControlsGamepadActionsCallbackInterface.OnSelect;
                @Cancel.started -= m_Wrapper.m_MenuControlsGamepadActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_MenuControlsGamepadActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_MenuControlsGamepadActionsCallbackInterface.OnCancel;
            }
            m_Wrapper.m_MenuControlsGamepadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
            }
        }
    }
    public MenuControlsGamepadActions @MenuControlsGamepad => new MenuControlsGamepadActions(this);

    // Menu Controls (Keyboard)
    private readonly InputActionMap m_MenuControlsKeyboard;
    private IMenuControlsKeyboardActions m_MenuControlsKeyboardActionsCallbackInterface;
    private readonly InputAction m_MenuControlsKeyboard_Start;
    private readonly InputAction m_MenuControlsKeyboard_Movement;
    private readonly InputAction m_MenuControlsKeyboard_Select;
    private readonly InputAction m_MenuControlsKeyboard_Cancel;
    private readonly InputAction m_MenuControlsKeyboard_Point;
    public struct MenuControlsKeyboardActions
    {
        private @PlayerContols m_Wrapper;
        public MenuControlsKeyboardActions(@PlayerContols wrapper) { m_Wrapper = wrapper; }
        public InputAction @Start => m_Wrapper.m_MenuControlsKeyboard_Start;
        public InputAction @Movement => m_Wrapper.m_MenuControlsKeyboard_Movement;
        public InputAction @Select => m_Wrapper.m_MenuControlsKeyboard_Select;
        public InputAction @Cancel => m_Wrapper.m_MenuControlsKeyboard_Cancel;
        public InputAction @Point => m_Wrapper.m_MenuControlsKeyboard_Point;
        public InputActionMap Get() { return m_Wrapper.m_MenuControlsKeyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuControlsKeyboardActions set) { return set.Get(); }
        public void SetCallbacks(IMenuControlsKeyboardActions instance)
        {
            if (m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface != null)
            {
                @Start.started -= m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface.OnStart;
                @Movement.started -= m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface.OnMovement;
                @Select.started -= m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface.OnSelect;
                @Cancel.started -= m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface.OnCancel;
                @Point.started -= m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface.OnPoint;
                @Point.performed -= m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface.OnPoint;
                @Point.canceled -= m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface.OnPoint;
            }
            m_Wrapper.m_MenuControlsKeyboardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
            }
        }
    }
    public MenuControlsKeyboardActions @MenuControlsKeyboard => new MenuControlsKeyboardActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerControlsAActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnGrab(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
        void OnDodge(InputAction.CallbackContext context);
        void OnSuper(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IMenuControlsGamepadActions
    {
        void OnStart(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
    public interface IMenuControlsKeyboardActions
    {
        void OnStart(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
    }
}
